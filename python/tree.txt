class Node(object):
  def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None


  def traverse_levelorder(root):
    if not root:
        return
    q = [root, True]  # Use True as sentinel for end of row
    while len(q) > 0:
        node = q.pop(0)
        print node.value,
        if node.left:
            q.append(node.left)
        if node.right:
            q.append(node.right)
        if q[0] is True:  # End of row
            q.pop(0)
            if len(q) > 0:
                q.append(True)
            print

#-------------------------------------
class BinaryTree:
   def __init__(self, value):
      self.value = value
      self.left = None
      self.right = None

   def insert(self, value):
      # node value is already set -> starts traversing
      if self.value:
         # left
         if value < self.value:
            # To set a new left value, make a new node
            if self.left is None:
               self.left = BinaryTree(value)

            # if left value is already set, call insert() on left
            else:
               self.left.insert(value)

         # right
         else:  # value > self.value
            # To set a new right value, make a new node
            if self.right is None:
               self.right = BinaryTree(value)

            # if right value is already set, call insert() on right
            else:
               self.right.insert(value)

      # if value is not set
      else:
         self.value = value

   def printInOrder(self):
      if self.left:
         self.left.printInOrder()
      print self.value,
      if self.right:
         self.right.printInOrder()

if __name__ == '__main__':
   root = BinaryTree('F')
   root.insert('B')
   root.insert('G')
   root.insert('A')
   root.insert('D')
   root.insert('I')
   root.insert('C')
   root.insert('E')
   root.insert('H')
   root.printInOrder()

Output:

A B C D E F G H I




########  Diameter of binary tree

class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None


class Solution:

    cmax = 0

    def rec_dia(self, node):
        if not node:
            return 0

        depth_l = self.rec_dia(node.left)
        depth_r = self.rec_dia(node.right)

        dia_at = depth_l + depth_r
        print(f"At node {node.val} diameter is {dia_at}")
        if dia_at > self.cmax:
            self.cmax = dia_at

        return 1 + max(depth_l, depth_r)

    def diameterOfBinaryTree(self, root: TreeNode) -> int:
        self.cmax = 0
        self.rec_dia(root)
        return self.cmax


if __name__ == "__main__":
    root = TreeNode(1)
    root.left = TreeNode(2)
    root.left.left = TreeNode(3)

    root.right = TreeNode(4)

    root2 = TreeNode(0)
    root2.left = TreeNode(1)
    sol = Solution()
    # print(sol.diameterOfBinaryTree(root))
    print(sol.diameterOfBinaryTree(root2))
