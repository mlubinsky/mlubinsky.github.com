import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

# Simulated f3 function which generates a dataframe
def f3(date, location):
    # Placeholder for your f3 implementation
    # It returns a pandas DataFrame for the given date and location
    if date == '2023-01-01':
      df = pd.DataFrame({
         'Criteria': ['c_1', 'c_2'],
         'metric': ['metric_1', 'metric_2'],
         'build_1': [10, 20],
         'build_2': [30, 40],
         'build_3': [100, 200]
      })
    else:
         df = pd.DataFrame({
         'Criteria': ['c_1', 'c_2'],
         'metric': ['metric_1', 'metric_2'],
         'build_1': [100, 200],
         'build_4': [300, 400]

      })   
    return df

# Function to combine dataframes per location
def f2(date_list):
    # Initialize a dictionary to hold combined dataframes for each location
    combined_data = {}

    # Loop over each date
    for date in date_list:
        # List of locations (simulated for now)
        locations = ["loc1", "loc2"]  # This should come from your data

        for location in locations:
            # Call f3(date, location) to get the dataframe for that location and date
            df = f3(date, location)

            # Add the date column to the dataframe
            df['date'] = date

            # Combine the dataframes for the same location
            if location not in combined_data:
                combined_data[location] = df
            else:
                combined_data[location] = pd.concat([combined_data[location], df], ignore_index=True)

    return combined_data

# Function to create the bar chart and line plot for each location
def plot_location(df_per_location, location_name):
    # Ensure output directories exist
    os.makedirs('plots', exist_ok=True)

    # Extract start and end date from the dataframe
    start_date = df_per_location['date'].min()
    end_date = df_per_location['date'].max()

    # Prepare for bar chart plot
    plt.figure(figsize=(10, len(df_per_location['metric'].unique()) * 4))

    # Group the dataframe by 'metric' and calculate the average for each build
    build_columns = [col for col in df_per_location.columns if col not in ['category', 'metric', 'date']]
    metric_groups = df_per_location.groupby('metric')

    for i, (metric, group) in enumerate(metric_groups):
        plt.subplot(len(metric_groups), 1, i + 1)
        group_avg = group[build_columns].mean()
        sns.barplot(x=group_avg.index, y=group_avg.values)
        plt.title(metric)
        plt.ylabel("Average Value")
        plt.xlabel("Build")

    # Save the bar chart as a PNG file
    plt.tight_layout()
    bar_chart_filename = f"plots/{location_name}_{start_date}_{end_date}_barchart.png"
    plt.savefig(bar_chart_filename)
    plt.close()
    print(bar_chart_filename)

    # Prepare for line plot
    plt.figure(figsize=(10, len(df_per_location['metric'].unique()) * 4))

    for i, (metric, group) in enumerate(metric_groups):
        plt.subplot(len(metric_groups), 1, i + 1)

        for build in build_columns:
            if build in group:
                sns.lineplot(x=group['date'], y=group[build], label=build)
        
        plt.title(metric)
        plt.ylabel("Value")
        plt.xlabel("Date")
        plt.legend(title="Builds")

    # Save the line plot as a PNG file
    plt.tight_layout()
    line_plot_filename = f"plots/{location_name}_{start_date}_{end_date}_lineplot.png"
    plt.savefig(line_plot_filename)
    plt.close()
    print(line_plot_filename)

# Example usage
def main():
    # Assume this list of dates is generated by f1() or provided
    date_list = ['2023-01-01', '2023-01-02']

    # Call f2 to combine dataframes by location
    combined_data = f2(date_list)

    # For each location, plot the data
    for location, df_per_location in combined_data.items():
        plot_location(df_per_location, location)

if __name__ == "__main__":
    main()
