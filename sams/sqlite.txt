annotation_header.sql
--------------------------
CREATE TABLE annotation_header (
	annotation_id    BIGSERIAL PRIMARY KEY,
	annotation_type  TEXT NOT NULL,
	test_package_id  BIGINT NOT NULL,
	subject          TEXT NOT NULL,
	annotation_text  TEXT NOT NULL,
	status           TEXT NOT NULL,
	jira_key         TEXT,
	jira_summary     TEXT,
	selection_string TEXT,
	test_id          BIGINT,
	angry_gps_log_id BIGINT,
	nav_gps_log_id   BIGINT,
	last_touched_by  TEXT,
    last_touched_ts  TIMESTAMP
);

ALTER SEQUENCE annotation_header_annotation_id_seq RESTART WITH 10000;

ALTER TABLE annotation_header ADD CONSTRAINT fk_ah_tpid FOREIGN KEY (test_package_id) REFERENCES test_package(test_package_id);
ALTER TABLE annotation_header ADD CONSTRAINT fk_ah_tid FOREIGN KEY (test_id) REFERENCES test_header(test_id);
ALTER TABLE annotation_header ADD CONSTRAINT fk_ah_agpslid FOREIGN KEY (angry_gps_log_id) REFERENCES angry_gps_log_header(log_id);
ALTER TABLE annotation_header ADD CONSTRAINT fk_ah_ngpslid FOREIGN KEY (nav_gps_log_id) REFERENCES nav_gps_log_header(log_id);
CREATE INDEX i_ah_tpidat ON annotation_header(test_package_id, annotation_type);
CREATE INDEX i_ah_tid ON annotation_header(test_id);
CREATE INDEX i_ah_ngpslid ON annotation_header(nav_gps_log_id);
CREATE INDEX i_ah_agpslid ON annotation_header(angry_gps_log_id);
CREATE INDEX i_ah_jk ON annotation_header(jira_key);

spotbot_profiler.py
---------------------
def create_local_db_objects(local_db_interface):
    logger.debug("creating local db test_profiler_log table")
    local_db_interface.execute("""
        CREATE TABLE IF NOT EXISTS test_profiler_log (
            record_id          INTEGER PRIMARY KEY,
            test_id            INTEGER NOT NULL,
            iteration          INTEGER NOT NULL,
            profiler_name      TEXT NOT NULL,
            log_sequence       INTEGER NOT NULL,
            data_structure     TEXT,
            record_modified_ts TEXT NOT NULL
        )
    """)

select profiler_name, count(*) FROM test_profiler_log group by profiler_name

Example of content of column test_profiler_log.data_structure:

{
    "msg_rx_time": "01:09:46.519000",
    "stuck_count": 0,
    "new_temp": 211850,
    "old_temp": null
}

def write_data_log_to_database(self):
-------------------------------------------
        if not self.profiler_enabled or not self.record_data_log_to_local_database_enabled:
            return

        if self.data_log is None:
            logger.debug("profiler {0} recorded no data, nothing to write to database".format(self.display_name))
            return

        # prepare the profiler data log for insert into the local sqlite database
        profiler_log_records = []
        for iteration in self.data_log:
            iteration_log = self.data_log[iteration]

            # if db_log_seq > 0, we are picking up from somewhere we left off in the same iteration
            db_log_seq = self.data_log_db_seq[iteration]
            for data_structure in iteration_log[db_log_seq:]:
                self.data_log_db_seq[iteration] += 1
                profiler_log_records += [(
                    self.spotbot_test.test_id,                                                  # test_id
                    iteration,                                                                  # iteration
                    self.display_name,                                                          # profiler_name
                    self.data_log_db_seq[iteration],                                            # log_sequence
                    None if data_structure is None else json.dumps(data_structure, indent = 4)  # data_structure
                )]

        if len(profiler_log_records) != 0:
            # insert the data
            current_timestamp = str(datetime.datetime.utcnow())
            self.spotbot_test.local_db_interface.execute_values(
                sql = """
                    INSERT INTO test_profiler_log (
                        test_id,
                        iteration,
                        profiler_name,
                        log_sequence,
                        data_structure,
                        record_modified_ts
                    ) VALUES (?, ?, ?, ?, ?, '""" + current_timestamp + """')
                """,
                records = profiler_log_records
            )
            logger.debug(f"profiler {self.display_name} wrote {len(profiler_log_records)} record(s) to the local database")

    # called after each test iteration, and can be called on demand by the test designer
    def stop(self):
------------------------------
        logger.debug("stopping profiler {0}".format(self.display_name))

        if not self.profiler_enabled:
            raise SpotbotProfilerException("stop was attempted on disabled profiler {0}".format(self.display_name))

        # flush any remaining buffered data to local database
        self.write_data_log_to_database()

        # archive profiler records from local db to shared farm db
        if not self.spotbot_test.offline_mode and self.record_data_log_to_shared_database_enabled:
            logger.debug(f"archiving {self.display_name} profiler database records")
            records = self.spotbot_test.local_db_interface.execute("""
                SELECT test_id,
                       iteration,
                       profiler_name,
                       log_sequence,
                       data_structure,
                       record_modified_ts
                FROM   test_profiler_log
                WHERE  test_id = :test_id
                   AND iteration = :iteration
                   AND profiler_name = :profiler_name
                """, {
                    "test_id": self.spotbot_test.test_id,
                    "iteration": self.spotbot_test.current_test_iteration,
                    "profiler_name": self.display_name
                }
            )
            rec_count = len(records)
            logger.debug(f"{rec_count} record(s) found for archiving")
            self.spotbot_test.db_interface.execute_values("""
                INSERT INTO test_profiler_log (
                    test_id,
                    iteration,
                    profiler_name,
                    log_sequence,
                    data_structure,
                    record_modified_ts
                ) VALUES %s
                ON CONFLICT DO NOTHING
                """, records
            )
            logger.debug(f"{rec_count} record(s) records archived")
        else:
            logger.debug(f"running in offline mode, skipping archiving profiler {self.display_name} local database records to shared database")



spotbot_test.py
-------------------
def create_local_db_objects(local_db_interface):
    logger.debug("creating local db test_log table")
    local_db_interface.execute("""
        CREATE TABLE IF NOT EXISTS test_log (
            record_id          INTEGER PRIMARY KEY,
            test_id            INTEGER NOT NULL,
            iteration          INTEGER,
            message            TEXT,
            data_structure     TEXT,
            record_modified_ts TEXT NOT NULL
        )
    """)

def db_log(self, message, data_structure = None):
---------------------------------------------------
        # encode optional data structure argument to JSON and insert log record to local and farm db
        record_id = None
        data_structure is None else json.dumps(data_structure, indent = 4)

        # local DB
        if self.local_db_interface is None:
            logger.warning("local database connection not established, unable to create local database log record")
        else:
            self.local_db_interface.execute("""
                INSERT INTO test_log (
                    test_id,
                    iteration,
                    message,
                    data_structure,
                    record_modified_ts
                ) VALUES (
                    :test_id,
                    :iteration,
                    :message,
                    :data_structure,
                    :record_modified_ts
                )
            """, {
                "test_id": self.test_id,
                "iteration": self.current_test_iteration,
                "message": message,
                "data_structure": data_structure_json,
                "record_modified_ts": str(datetime.datetime.utcnow())
            })
            logger.debug("created local database test_log record")


test_controller.py
-------------------
        spotbot_profiler.create_local_db_objects(self.local_db_interface)
        spotbot_test.create_local_db_objects(self.local_db_interface)
